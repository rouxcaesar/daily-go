Variable Scope - if an entity is declared wihtin a function, it is local to that function. If declared outside of a function, it is visible in all files of the package to which it belongs.

If a name begins with an upper-case letter, then it is exported, which means that it is visible and accessible outside of its own package and may be referred to by other parts of the program.

The Go style guide for names uses camelcase, just like JavaScript.


// Declarations

There are four major kinds of declarations: var, const, type, and func.

A var declaration creates a variable of a particular type, attaches a name to it, and sets its initial value.

General form: var name type = expression

If the type is omitted, it is determined by the initializer expression.
If the expression is omitted, the initial value is the zero value for the type.
  - 0 for numbers
  - "" for strings
  - false for booleans
  - nil for interfaces and references
  - aggregate types (arrays, structs) have the zero value of all of its
    elements or fields.

This ensures that in Go there is no such thing as an unitialized variable.

You can declare and optionally initialize a set of variables in a single declaration, with a mathcing list of expressions.

var i, j, k int     // int, int, int

If you omit the type, this allows declaration of multiple variables of different types.

var b, f, s = true, 2.3, "four"   // bool, float64, string

A set of variables can also be initialized by calling a function that returns multiple values.

var f, err = os.Open(name)    // os.Open() returns a file and an error

As a matter of style, short variable declaratinos (:=) are used to declare and initialize the majority of local variables.

A tuple assignment is where each variable on the left-hand side is assigned the corresponding value from the right-hand side:

i, j = j, i   // swap values of i and j

NOTE: a short variable declaration (:=) does not necessarily declare all the variables on the left-hand side. If some of them were already declared in the same lexical block, then the short variable declaration acts like an assignment to those variables.

in, err := os.Open(infile)      // declares both in and err
//..
out, err := os.Create(outfile)  // declares out; assigns value to existing err

NOTE: a short variable declaration (:=) must declare at least one new variable

f, err := os.Open(infile)      // declares both in and err
//..
f, err := os.Create(outfile)   // compile error: no new variables declared


// Pointers

A variable is a piece of storage containing a value.

A pointer value is the address of a variable. Thus, a pointer is the location at which a value is stored.
    - not every vaule has an address, but every variable does.
    - with a pointer, we can read/update the value of a variable indirectly.
        - w/o using or even knowing the name of the variable

Let's say that we have a variable declared like so: var x int
    - the expression &x means "address of x"
    - &x yields a pointer to the integer variable (a value of type *int)
    - *int is pronounced "pointer to int"
    - if this value is called p, we cay "p points to x"
        - or "p contains the address of x"
    - the variable to which p points is written *p
    - the expression *p yields the value of that variable

x := 1
p := &x           // p, of type *int, points to x
fmt.Println(*p)   // "1"
*p = 2            // equivalent to x = 2
fmt.Println(x)    // "2"

The zero value for a pointer of any type is nil.

The test p != nil is true if p points to a variable.

Two pointers are equal if and only if they point to the same variable or are both nil.

PICK UP: pg. 52
