// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// fibonacci(0) => 0
// fibonacci(1) => 1
// fibonacci(2) => 1
// fibonacci(3) => 2
// fibonacci(4) => 3

// Base Cases:
// - zeroth term is 0
// - first term is 1
// - nth term is the result of fib(n-1) + fib(n-2)

// Input: max value of Fibonacci sequence -> 4 million -> 4e6
// Output: sum of the even-valued terms

// Note: for this problem, we start with the first Fibonacci term of 2 (fib(2) => 1)

// Approach:
// - initialize sum variable and assign to 0
// - initialize fibonacci input and assign to 2
// - recursively call fibonacci function to find value of fib(n-1) + fib(n-2)
// - if result of fibonacci function is even, add to sum
// - once we reach our max value, return the sum

package main 

import "fmt"

func fibonacci(num int) int {
	if num == 0 {
		return 0
	} else if (num == 1) {
		return 1
	} else {
		return fibonacci(num - 1) + fibonacci(num - 2)
	}
}

func sumOfEvenFibonacciTerms(max_value int) int {
	var sum int = 0
	var fibTerm int = 2

	for  {
		var fibValue int = fibonacci(fibTerm)
		
		if fibValue >= max_value {
			break
		}

		if fibValue % 2 == 0 {
			sum += fibValue
		}
		fibTerm++
	} 

	return sum
}

func main() {
	fmt.Println(sumOfEvenFibonacciTerms(4000000))	// 4613732
}




